- import demos.action._

- val currentActionFileName = at("currentActionFileName").asInstanceOf[String]

!!! 5
html
  head
    != antiCsrfMeta
    != xitrumCss

    meta(content="text/html; charset=utf-8" http-equiv="content-type")
    title Welcome to Xitrum

    link(type="image/vnd.microsoft.icon" rel="shortcut icon" href={publicUrl("favicon.ico")})

    link(type="text/css" rel="stylesheet" media="all" href={publicUrl("css/960/reset.css")})
    link(type="text/css" rel="stylesheet" media="all" href={publicUrl("css/960/text.css")})
    link(type="text/css" rel="stylesheet" media="all" href={publicUrl("css/960/960.css")})
    link(type="text/css" rel="stylesheet" media="all" href={publicUrl("css/app.css")})

  body
    .container_12
      h1
        a(href={url[SiteIndex]}) Xitrum Demos

      .grid_8
        #flash
          !~ jsRenderFlash()
        != renderedView

        hr
        h2 Source code of current action
        div
          b= "demos/action/"+currentActionFileName
          pre(id="actionSrc" class="prettyprint linenums:1 lang-scala")
            ~~ SourceRenderer.render("src/main/scala/demos/action/" + currentActionFileName)

      .grid_4
        h3 Demos

        p
          a(href="https://github.com/ngocdaothanh/xitrum-demos/tree/master/src/main") Source code

        p REST
        ul
          li
            a(href={url[ArticlesIndex]}) index
          li
            a(href={url[ArticlesShow]("id" -> 1)}) show
          li
            a(href={url[ArticlesEdit]("id" -> 1)}) edit
          li
            a(href={url[ArticlesNew]}) new

        p Async
        ul
          li
            a(href={url[ActorActionDemo]}) ActorAction (delayed 3s)
          li
            a(href={url[WebSocketChat]}) WebSocket chat
          li
            a(href={url[SockJsChat]}) SockJS chat

        p Filters
        ul
          li
            a(href={url[BeforeFilter]}) Before filter
          li
            a(href={url[AfterFilter]}) After filter
          li
            a(href={url[AroundFilter]}) Around filter

        p Cache
        ul
          li
            a(href={url[ActionCacheDemo]}) Action cache
          li
            a(href={url[PageCacheDemo]}) Page cache

        p Scalate
        ul
          li
            a(href={url[ScalateJadeString]}) Template from string
          li
            a(href={url[ScalateMustache]}) Mustache template

        p Various demos
        ul
          li
            a(href={url[ArticlesDotShow]("id" -> 1, "format" -> "foo")}) Dot in path
          li
            a(href={url[Upload]}) File upload
          li
            a(href={url[xitrum.routing.SwaggerUi]}) Swagger Doc (api_key = 123)
          li
            a(href={url[ForwardDemo]}) forwardTo
          li
            a(href={url[TodosIndex]}) Knockout.js
          li
            a(href={url[GetPost]}) Multiple routes to an action
          li
            a(href={url[JsonPost]}) Json POST parse action
          li
            a(href={url[OpenIdLogin]}) OpenID login
          li
            a(href={url[FileMonitor]}) File Monitor

    != jsDefaults
    != jsForView
    script(src={publicUrl("js/run_prettify.js")})
